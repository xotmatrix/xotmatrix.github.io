class _A1 extends AudioWorkletProcessor{constructor(){super();this._B1=true;this.port.onmessage=(_C1)=>{if(_C1.data==="kill")this._B1=false;};}}class _D1 extends _A1{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}process(_E1,_F1,parameters){const _G1=_E1[0];for(let c=0;c<_G1.length;++c){const _H1=_G1[c];for(let _I1=0;_I1<_H1.length;++_I1)_F1[parameters.bypass[_I1]??parameters.bypass[0]][c][_I1]=_H1[_I1];}return this._B1;}}class _J1 extends _A1{
static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}process(_E1,_F1,parameters){const _K1=_E1[0];const _L1=_E1[1];const _M1=_F1[0];const gain=parameters.gain;for(let c=0;c<_L1.length;++c){const _H1=_L1[c];const _N1=_M1[c];for(let _I1=0;_I1<_H1.length;++_I1)_N1[_I1]=_H1[_I1];}for(let c=0;c<_K1.length;++c){const _H1=_K1[c];const _N1=_M1[c];for(let _I1=0;_I1<_H1.length;++_I1)_N1[_I1]+=_H1[_I1]*(gain[_I1]??gain[0]);}return this._B1;}}registerProcessor("audio-bus-input",
_D1);registerProcessor("audio-bus-output",_J1);class _O1 extends _A1{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"factor",automationRate:"a-rate",defaultValue:1,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",defaultValue:16,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}static _P1=[undefined,
undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_Q1){super();const _R1=_Q1.outputChannelCount[0];this._S1=new Float32Array(_R1);this._T1=new Uint32Array(_R1);}process(_E1,_F1,parameters){const _G1=_E1[0];const _M1=_F1[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<_G1.length;++c){const _H1=_G1[c];const _N1=_M1[c];for(let _I1=0;_I1<_H1.length;++_I1){_N1[_I1]=_H1[_I1];
if(this._T1[c]===0)this._S1[c]=_H1[_I1];++this._T1[c];this._T1[c]%=(factor[_I1]??factor[0]);if(bypass[_I1]??bypass[0])continue;let _U1=this._S1[c];const _V1=(gain[_I1]??gain[0]);_U1*=_V1;_U1=Math.max(Math.min(_U1,1.0),-1.0);const _W1=resolution[_I1]??resolution[0];const max=(_U1>0.0)?_O1._P1[_W1]-1:_O1._P1[_W1];_U1=Math.round(_U1*max)/max;const _X1=(mix[_I1]??mix[0]);_N1[_I1]*=(1.0-_X1);_N1[_I1]+=(_U1*_X1);}}return this._B1;}}registerProcessor("bitcrusher-processor",_O1);class _Y1 extends _A1{static _Z1=5;
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:_Y1._Z1},{name:"feedback",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"mix",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(_Q1){super();const _R1=_Q1.outputChannelCount[0];const __1=_Y1._Z1*sampleRate;this.buffer=new Array(_R1);this._02=new Uint32Array(_R1);for(let c=0;
c<_R1;++c)this.buffer[c]=new Float32Array(__1);}process(_E1,_F1,parameters){const _G1=_E1[0];const _M1=_F1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<_G1.length;++c){const _H1=_G1[c];const _N1=_M1[c];for(let _I1=0;_I1<_H1.length;++_I1){_N1[_I1]=_H1[_I1];const _12=this._22(c,(time[_I1]??time[0]));const _32=_H1[_I1]+(_12*(feedback[_I1]??feedback[0]));this.write(c,_32);if((bypass[_I1]??bypass[0]))continue;const _X1=(mix[_I1]??mix[0]);
_N1[_I1]*=(1-_X1);_N1[_I1]+=(_12*_X1);}}return this._B1;}_22(_42,_52){const _62=_52*sampleRate;let _72=(this._02[_42]-~~_62);let _82=(_72-1);while(_72<0)_72+=this.buffer[_42].length;while(_82<0)_82+=this.buffer[_42].length;const frac=_62-~~_62;const _92=this.buffer[_42][_72];const _a2=this.buffer[_42][_82];return _92+(_a2-_92)*frac;}write(_42,_b2){++this._02[_42];this._02[_42]%=this.buffer[_42].length;this.buffer[_42][this._02[_42]]=_b2;}}registerProcessor("delay-processor",_Y1);class _c2 extends _A1{static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}process(_E1,_F1,parameters){const _G1=_E1[0];const _M1=_F1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<_G1.length;++c){const _H1=_G1[c];const _N1=_M1[c];for(let _I1=0;_I1<_H1.length;++_I1){_N1[_I1]=_H1[_I1];if(bypass[_I1]??bypass[0])continue;_N1[_I1]*=(gain[_I1]??gain[0]);}}return this._B1;}}registerProcessor("gain-processor",
_c2);class _d2 extends _A1{static get parameterDescriptors(){const _e2=Math.min(sampleRate/2,20000);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:10,minValue:10,maxValue:_e2},{name:"q",automationRate:"a-rate",defaultValue:1,minValue:1,maxValue:100}];}constructor(_Q1){super();const _R1=_Q1.outputChannelCount[0];this._f2=0;this._g2=0;this._h2=0;this._i2=0;this._j2=0;this._k2=new Float32Array(_R1);this._l2=new Float32Array(_R1);
this._m2=new Float32Array(_R1);this._n2=new Float32Array(_R1);this._o2=-1;this._p2=-1;}process(_E1,_F1,parameters){const _G1=_E1[0];const _M1=_F1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _q2=(cutoff.length===1&&q.length===1);if(_q2)this._r2(cutoff[0],q[0]);for(let c=0;c<_G1.length;++c){const _H1=_G1[c];const _N1=_M1[c];for(let _I1=0;_I1<_H1.length;++_I1){if(!_q2)this._r2(cutoff[_I1]??cutoff[0],q[_I1]??q[0]);const _s2=this._h2*_H1[_I1]+this._i2*this._k2[c]+this._j2*this._l2[c]-this._f2*this._m2[c]-this._g2*this._n2[c];
this._l2[c]=this._k2[c];this._k2[c]=_H1[_I1];this._n2[c]=this._m2[c];this._m2[c]=_s2;_N1[_I1]=(bypass[_I1]??bypass[0])?_H1[_I1]:_s2;}}return this._B1;}_r2(_t2,_u2){if(_t2===this._o2&&_u2===this._p2)return;const _v2=2*Math.PI*_t2/sampleRate;const alpha=Math.sin(_v2)/(2*_u2);const _w2=Math.cos(_v2);const _x2=1+alpha;const _f2=-2*_w2;const _g2=1-alpha;const _h2=(1+_w2)/2;const _i2=-1-_w2;const _j2=(1+_w2)/2;this._f2=_f2/_x2;this._g2=_g2/_x2;this._h2=_h2/_x2;this._i2=_i2/_x2;this._j2=_j2/_x2;this._o2=_t2;this._p2=_u2;
}}registerProcessor("hpf2-processor",_d2);class _y2 extends _A1{static get parameterDescriptors(){const _e2=Math.min(sampleRate/2,20000);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:_e2,minValue:10,maxValue:_e2},{name:"q",automationRate:"a-rate",defaultValue:1,minValue:1,maxValue:100}];}constructor(_Q1){super();const _R1=_Q1.outputChannelCount[0];this._f2=0;this._g2=0;this._h2=0;this._i2=0;this._j2=0;this._k2=new Float32Array(_R1);
this._l2=new Float32Array(_R1);this._m2=new Float32Array(_R1);this._n2=new Float32Array(_R1);this._o2=-1;this._p2=-1;}process(_E1,_F1,parameters){const _G1=_E1[0];const _M1=_F1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _q2=(cutoff.length===1&&q.length===1);if(_q2)this._r2(cutoff[0],q[0]);for(let c=0;c<_G1.length;++c){const _H1=_G1[c];const _N1=_M1[c];for(let _I1=0;_I1<_H1.length;++_I1){if(!_q2)this._r2(cutoff[_I1]??cutoff[0],q[_I1]??q[0]);const _s2=this._h2*_H1[_I1]+this._i2*this._k2[c]+this._j2*this._l2[c]-this._f2*this._m2[c]-this._g2*this._n2[c];
this._l2[c]=this._k2[c];this._k2[c]=_H1[_I1];this._n2[c]=this._m2[c];this._m2[c]=_s2;_N1[_I1]=(bypass[_I1]??bypass[0])?_H1[_I1]:_s2;}}return this._B1;}_r2(_t2,_u2){if(_t2===this._o2&&_u2===this._p2)return;const _v2=2*Math.PI*_t2/sampleRate;const alpha=Math.sin(_v2)/(2*_u2);const _w2=Math.cos(_v2);const _x2=1+alpha;const _f2=-2*_w2;const _g2=1-alpha;const _h2=(1-_w2)/2;const _i2=1-_w2;const _j2=(1-_w2)/2;this._f2=_f2/_x2;this._g2=_g2/_x2;this._h2=_h2/_x2;this._i2=_i2/_x2;this._j2=_j2/_x2;this._o2=_t2;this._p2=_u2;
}}registerProcessor("lpf2-processor",_y2);class _z2{constructor(_A2){this._B2=0;this._C2=0;this.feedback=0;this._D2=0;this.buffer=new Float32Array(_A2);this._E2=0;}process(_b2){const out=this.buffer[this._E2];this._D2=(this._D2*this._B2)+(out*this._C2);this.buffer[this._E2]=_b2+(this._D2*this.feedback);++this._E2;this._E2%=this.buffer.length;return out;}_F2(_G2){this.feedback=Math.min(Math.max(0,_G2),1);}_H2(_I2){this._B2=Math.min(Math.max(0,_I2),1);this._C2=1-this._B2;}}class _J2{constructor(_A2){this.feedback=0;
this.buffer=new Float32Array(_A2);this._E2=0;}process(_b2){const out=this.buffer[this._E2];this.buffer[this._E2]=_b2+(out*this.feedback);++this._E2;this._E2%=this.buffer.length;return(out-_b2);}_F2(_G2){this.feedback=Math.min(Math.max(0,_G2),1);}}class _K2 extends _A1{static _L2=8;static _M2=4;static _N2=0.015;static _O2=0.4;static _P2=0.28;static _Q2=0.7;static _R2=[1116,1188,1277,1356,1422,1491,1557,1617];static _S2=[1139,1211,1300,1379,1445,1514,1580,1640];static _T2=[556,441,341,225];static _U2=[579,464,364,
248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.5,minValue:0,maxValue:1},{name:"damp",automationRate:"a-rate",defaultValue:0.5,minValue:0,maxValue:1},{name:"mix",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(_Q1){super();const _R1=_Q1.outputChannelCount[0];this._V2=-1;this._W2=-1;this._X2=new Array(_R1);this._Y2=new Array(_R1);const _Z2=[_K2._R2,_K2._S2];
const __2=[_K2._T2,_K2._U2];for(let c=0;c<_R1;++c){this._X2[c]=new Array(_K2._L2);this._Y2[c]=new Array(_K2._M2);for(let i=0;i<_K2._L2;++i)this._X2[c][i]=new _z2(_Z2[c%_Z2.length][i]);for(let i=0;i<_K2._M2;++i)this._Y2[c][i]=new _J2(__2[c%__2.length][i]);}this._03(0.5);this._H2(0.5);for(let c=0;c<_R1;++c)for(let i=0;i<_K2._M2;++i)this._Y2[c][i]._F2(0.5);}process(_E1,_F1,parameters){const _G1=_E1[0];const _M1=_F1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;
for(let c=0;c<_G1.length;++c){const _H1=_G1[c];const _N1=_M1[c];for(let _I1=0;_I1<_H1.length;++_I1){this._03(size[_I1]??size[0]);this._H2(damp[_I1]??damp[0]);_N1[_I1]=_H1[_I1];let out=0;const _U1=_H1[_I1]*_K2._N2;for(let i=0;i<_K2._L2;++i)out+=this._X2[c][i].process(_U1);for(let i=0;i<_K2._M2;++i)out=this._Y2[c][i].process(out);if(bypass[_I1]??bypass[0])continue;const _X1=(mix[_I1]??mix[0]);_N1[_I1]*=(1-_X1);_N1[_I1]+=(out*_X1);}}return this._B1;}_03(_A2){if(_A2===this._V2)return;const size=(_A2*_K2._P2)+_K2._Q2;
for(let c=0;c<this._X2.length;++c)for(let i=0;i<_K2._L2;++i)this._X2[c][i]._F2(size);this._V2=_A2;}_H2(_I2){if(_I2===this._W2)return;const damp=_I2*_K2._O2;for(let c=0;c<this._X2.length;++c)for(let i=0;i<_K2._L2;++i)this._X2[c][i]._H2(damp);this._W2=_I2;}}registerProcessor("reverb1-processor",_K2);