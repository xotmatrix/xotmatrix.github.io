AudioWorkletProcessor.prototype._93=function(){this._a3=true;this.port.onmessage=(_b3)=>{if(_b3.data==="kill")this._a3=false;};};class _c3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._93();}process(_d3,_e3,parameters){const input=_d3[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _f3=input[c];for(let _g3=0;_g3<_f3.length;++_g3){const _h3=(bypass[_g3]!==undefined)?bypass[_g3]:bypass[0];
_e3[_h3][c][_g3]=_f3[_g3];}}return this._a3;}}class _i3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._93();}process(_d3,_e3,parameters){const _j3=_d3[0];const _k3=_d3[1];const output=_e3[0];const gain=parameters.gain;for(let c=0;c<_k3.length;++c){const _f3=_k3[c];const _l3=output[c];for(let _g3=0;_g3<_f3.length;++_g3)_l3[_g3]=_f3[_g3];}for(let c=0;c<_j3.length;++c){const _f3=_j3[c];const _l3=output[c];
for(let _g3=0;_g3<_f3.length;++_g3){const _m3=(gain[_g3]!==undefined)?gain[_g3]:gain[0];_l3[_g3]+=_f3[_g3]*_m3;}}return this._a3;}}registerProcessor("audio-bus-input",_c3);registerProcessor("audio-bus-output",_i3);class _n3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _o3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_p3){super();this._93();const _q3=_p3.outputChannelCount[0];this._r3=new Float32Array(_q3);this._s3=new Uint32Array(_q3);}process(_d3,_e3,parameters){const input=_d3[0];const output=_e3[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _f3=input[c];const _l3=output[c];for(let _g3=0;_g3<_f3.length;++_g3){_l3[_g3]=_f3[_g3];if(this._s3[c]===0)this._r3[c]=_f3[_g3];const _t3=(factor[_g3]!==undefined)?factor[_g3]:factor[0];++this._s3[c];this._s3[c]%=_t3;const _h3=(bypass[_g3]!==undefined)?bypass[_g3]:bypass[0];if(_h3>0.0){continue;}let _u3=this._r3[c];const _m3=(gain[_g3]!==undefined)?gain[_g3]:gain[0];_u3*=_m3;_u3=Math.max(Math.min(_u3,
1.0),-1.0);const _v3=(resolution[_g3]!==undefined)?resolution[_g3]:resolution[0];const max=(_u3>0.0)?_n3._o3[_v3]-1:_n3._o3[_v3];_u3=Math.round(_u3*max)/max;const _w3=(mix[_g3]!==undefined)?mix[_g3]:mix[0];_l3[_g3]*=(1.0-_w3);_l3[_g3]+=(_u3*_w3);}}return this._a3;}}registerProcessor("bitcrusher-processor",_n3);class _x3{constructor(_y3=1e-3){this.setTime(_y3);}setTime(_y3){this._z3=Math.exp(-1/(_y3*sampleRate));}process(_A3,_B3){return _A3+this._z3*(_B3-_A3);}}class _C3{constructor(_D3,_E3){this._F3=new _x3(_D3);
this._G3=new _x3(_E3);this._H3=_D3;this._I3=_E3;}_J3(_y3){if(_y3===this._H3)return;this._F3.setTime(_y3);this._H3=_y3;}_K3(_y3){if(_y3===this._I3)return;this._G3.setTime(_y3);this._I3=_y3;}process(_A3,_B3){if(_A3>_B3)return this._F3.process(_A3,_B3);else return this._G3.process(_A3,_B3);}}class _L3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_M3){super();this._93();const _F3=_L3.parameterDescriptors.find(_N3=>_N3.name==="attack");const _G3=_L3.parameterDescriptors.find(_N3=>_N3.name==="release");
this._O3=new _C3(_F3.defaultValue,_G3.defaultValue);this._P3=0;}process(_Q3,_R3,_S3){const input=_Q3[0];const output=_R3[0];const bypass=_S3.bypass;const ingain=_S3.ingain;const outgain=_S3.outgain;const threshold=_S3.threshold;const ratio=_S3.ratio;const attack=_S3.attack;const release=_S3.release;if(input.length===0)return this._a3;for(let _g3=0;_g3<input[0].length;++_g3){let frame=input.map(_T3=>_T3[_g3]);output.forEach((_T3,_U3)=>{_T3[_g3]=frame[_U3];});const _V3=(ingain[_g3]!==undefined)?ingain[_g3]:ingain[0];
frame=frame.map(_W3=>_W3*=_V3);const rect=frame.map(_W3=>Math.abs(_W3));const max=Math.max(...rect);const _X3=_Y3(max);const _Z3=(threshold[_g3]!==undefined)?threshold[_g3]:threshold[0];const __3=_Y3(_Z3);const _04=Math.max(0,_X3-__3);const _F3=(attack[_g3]!==undefined)?attack[_g3]:attack[0];const _G3=(release[_g3]!==undefined)?release[_g3]:release[0];this._O3._J3(_F3);this._O3._K3(_G3);this._P3=this._O3.process(_04,this._P3);const _h3=(bypass[_g3]!==undefined)?bypass[_g3]:bypass[0];if(_h3>0)continue;const _v3=(ratio[_g3]!==undefined)?ratio[_g3]:ratio[0];
const _14=(this._P3/_v3)-this._P3;const _m3=_24(_14);frame=frame.map(_W3=>_W3*=_m3);const _34=(outgain[_g3]!==undefined)?outgain[_g3]:outgain[0];frame=frame.map(_W3=>_W3*=_34);output.forEach((_T3,_U3)=>{_T3[_g3]=frame[_U3];});}return this._a3;}}function _Y3(_44){return 20*Math.log10(_44);}function _24(_44){return Math.pow(10,_44/20);}registerProcessor("compressor-processor",_L3);class _54 extends AudioWorkletProcessor{static _64=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_54._64},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_p3){super();this._93();const _q3=_p3.outputChannelCount[0];const _74=(_54._64*sampleRate)+1;this.buffer=new Array(_q3);this._84=new Uint32Array(_q3);for(let c=0;c<_q3;++c)this.buffer[c]=new Float32Array(_74);
}process(_d3,_e3,parameters){const input=_d3[0];const output=_e3[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _f3=input[c];const _l3=output[c];for(let _g3=0;_g3<_f3.length;++_g3){_l3[_g3]=_f3[_g3];const _Z3=(time[_g3]!==undefined)?time[_g3]:time[0];const _94=this._a4(c,_Z3);const _t3=(feedback[_g3]!==undefined)?feedback[_g3]:feedback[0];const _b4=_f3[_g3]+(_94*_t3);this.write(c,_b4);const _h3=(bypass[_g3]!==undefined)?bypass[_g3]:bypass[0];
if(_h3>0.0){continue;}const _w3=(mix[_g3]!==undefined)?mix[_g3]:mix[0];_l3[_g3]*=(1-_w3);_l3[_g3]+=(_94*_w3);}}return this._a3;}_a4(_c4,_y3){const _d4=_y3*sampleRate;let _e4=(this._84[_c4]-~~_d4);let _f4=(_e4-1);while(_e4<0)_e4+=this.buffer[_c4].length;while(_f4<0)_f4+=this.buffer[_c4].length;const frac=_d4-~~_d4;const _g4=this.buffer[_c4][_e4];const _h4=this.buffer[_c4][_f4];return _g4+(_h4-_g4)*frac;}write(_c4,_i4){++this._84[_c4];this._84[_c4]%=this.buffer[_c4].length;this.buffer[_c4][this._84[_c4]]=_i4;
}}registerProcessor("delay-processor",_54);class _j4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._93();}process(_k4,_l4,_m4){const input=_k4[0];const _n4=_l4[0];const _o4=_l4[1];for(let c=0;c<input.length;++c){const _f3=input[c];const _p4=_n4[c];const _q4=_o4[c];for(let _g3=0;_g3<_f3.length;++_g3){_p4[_g3]=_f3[_g3];_q4[_g3]=_f3[_g3];}}return this._a3;}}class _r4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._93();}process(_k4,_l4,_m4){const _j3=_k4[0];const _k3=_k4[1];const output=_l4[0];const bypass=_m4.bypass;for(let c=0;c<_k3.length;++c){const _s4=_j3[c];const _t4=_k3[c];const _l3=output[c];for(let _g3=0;_g3<_s4.length;++_g3){const _h3=(bypass[_g3]!==undefined)?bypass[_g3]:bypass[0];if(_h3>0){_l3[_g3]=_t4[_g3];}else {_l3[_g3]=_s4[_g3];}}}return this._a3;}}registerProcessor("eq-input",_j4);registerProcessor("eq-output",_r4);class _u4 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._93();}process(_d3,_e3,parameters){const input=_d3[0];const output=_e3[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _f3=input[c];const _l3=output[c];for(let _g3=0;_g3<_f3.length;++_g3){_l3[_g3]=_f3[_g3];const _h3=(bypass[_g3]!==undefined)?bypass[_g3]:bypass[0];
if(_h3>0.0){continue;}const _m3=(gain[_g3]!==undefined)?gain[_g3]:gain[0];_l3[_g3]*=_m3;}}return this._a3;}}registerProcessor("gain-processor",_u4);class _v4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _w4=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_w4),minValue:10.0,maxValue:_w4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0}
,{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_p3){super();this._93();const _q3=_p3.outputChannelCount[0];this._x4=0;this._y4=0;this._z4=0;this._A4=0;this._B4=0;this._C4=new Float32Array(_q3);this._D4=new Float32Array(_q3);this._E4=new Float32Array(_q3);this._F4=new Float32Array(_q3);this._G4=-1;this._H4=-1;this._I4=-1;}process(_d3,_e3,parameters){const input=_d3[0];const output=_e3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;
const _J4=(freq.length===1&&q.length===1&&gain.length===1);if(_J4)this._K4(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _f3=input[c];const _l3=output[c];for(let _g3=0;_g3<_f3.length;++_g3){if(_J4===false){const _t3=(freq[_g3]!==undefined)?freq[_g3]:freq[0];const _L4=(q[_g3]!==undefined)?q[_g3]:q[0];const _m3=(gain[_g3]!==undefined)?gain[_g3]:gain[0];this._K4(_t3,_L4,_m3);}const _M4=this._z4*_f3[_g3]+this._A4*this._C4[c]+this._B4*this._D4[c]-this._x4*this._E4[c]-this._y4*this._F4[c];this._D4[c]=this._C4[c];
this._C4[c]=_f3[_g3];this._F4[c]=this._E4[c];this._E4[c]=_M4;const _h3=(bypass[_g3]!==undefined)?bypass[_g3]:bypass[0];_l3[_g3]=(_h3>0)?_f3[_g3]:_M4;}}return this._a3;}_K4(_N4,_O4,_P4){if(_N4===this._G4&&_O4===this._H4&&_P4===this._I4)return;const _Q4=2*Math.PI*_N4/sampleRate;const _R4=Math.cos(_Q4);const _S4=Math.sqrt(_P4);const _T4=_S4+1;const _U4=_S4-1;const _V4=_T4*_R4;const _W4=_U4*_R4;const _X4=_T4-_W4;const _Y4=_T4+_W4;const alpha=Math.sin(_Q4)/(2*_O4);const _Z4=(2*Math.sqrt(_S4)*alpha);const __4=_X4+_Z4;
const _x4=2*(_U4-_V4);const _y4=_X4-_Z4;const _z4=_S4*(_Y4+_Z4);const _A4=-2*_S4*(_U4+_V4);const _B4=_S4*(_Y4-_Z4);this._x4=_x4/__4;this._y4=_y4/__4;this._z4=_z4/__4;this._A4=_A4/__4;this._B4=_B4/__4;this._G4=_N4;this._H4=_O4;this._I4=_P4;}}registerProcessor("hi-shelf-processor",_v4);class _05 extends AudioWorkletProcessor{static get parameterDescriptors(){const _15=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_15),minValue:10.0,maxValue:_15},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_p3){super();this._93();const _q3=_p3.outputChannelCount[0];this._x4=0;this._y4=0;this._z4=0;this._A4=0;this._B4=0;this._C4=new Float32Array(_q3);this._D4=new Float32Array(_q3);this._E4=new Float32Array(_q3);this._F4=new Float32Array(_q3);this._25=-1;this._H4=-1;}process(_d3,_e3,parameters){const input=_d3[0];const output=_e3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _J4=(cutoff.length===1&&q.length===1);if(_J4)this._K4(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _f3=input[c];const _l3=output[c];for(let _g3=0;_g3<_f3.length;++_g3){if(_J4===false){const c=(cutoff[_g3]!==undefined)?cutoff[_g3]:cutoff[0];const _L4=(q[_g3]!==undefined)?q[_g3]:q[0];this._K4(c,_L4);}const _M4=this._z4*_f3[_g3]+this._A4*this._C4[c]+this._B4*this._D4[c]-this._x4*this._E4[c]-this._y4*this._F4[c];this._D4[c]=this._C4[c];this._C4[c]=_f3[_g3];this._F4[c]=this._E4[c];
this._E4[c]=_M4;const _h3=(bypass[_g3]!==undefined)?bypass[_g3]:bypass[0];_l3[_g3]=(_h3>0)?_f3[_g3]:_M4;}}return this._a3;}_K4(_35,_O4){if(_35===this._25&&_O4===this._H4)return;const _Q4=2*Math.PI*_35/sampleRate;const alpha=Math.sin(_Q4)/(2*_O4);const _R4=Math.cos(_Q4);const __4=1+alpha;const _x4=-2*_R4;const _y4=1-alpha;const _z4=(1+_R4)/2;const _A4=-1-_R4;const _B4=(1+_R4)/2;this._x4=_x4/__4;this._y4=_y4/__4;this._z4=_z4/__4;this._A4=_A4/__4;this._B4=_B4/__4;this._25=_35;this._H4=_O4;}}registerProcessor("hpf2-processor",
_05);class _45 extends AudioWorkletProcessor{static get parameterDescriptors(){const _w4=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_w4),minValue:10.0,maxValue:_w4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_p3){super();this._93();const _q3=_p3.outputChannelCount[0];
this._x4=0;this._y4=0;this._z4=0;this._A4=0;this._B4=0;this._C4=new Float32Array(_q3);this._D4=new Float32Array(_q3);this._E4=new Float32Array(_q3);this._F4=new Float32Array(_q3);this._G4=-1;this._H4=-1;this._I4=-1;}process(_d3,_e3,parameters){const input=_d3[0];const output=_e3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _J4=(freq.length===1&&q.length===1&&gain.length===1);if(_J4)this._K4(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _f3=input[c];const _l3=output[c];for(let _g3=0;_g3<_f3.length;++_g3){if(_J4===false){const _t3=(freq[_g3]!==undefined)?freq[_g3]:freq[0];const _L4=(q[_g3]!==undefined)?q[_g3]:q[0];const _m3=(gain[_g3]!==undefined)?gain[_g3]:gain[0];this._K4(_t3,_L4,_m3);}const _M4=this._z4*_f3[_g3]+this._A4*this._C4[c]+this._B4*this._D4[c]-this._x4*this._E4[c]-this._y4*this._F4[c];this._D4[c]=this._C4[c];this._C4[c]=_f3[_g3];this._F4[c]=this._E4[c];this._E4[c]=_M4;const _h3=(bypass[_g3]!==undefined)?bypass[_g3]:bypass[0];
_l3[_g3]=(_h3>0)?_f3[_g3]:_M4;}}return this._a3;}_K4(_N4,_O4,_P4){if(_N4===this._G4&&_O4===this._H4&&_P4===this._I4)return;const _Q4=2*Math.PI*_N4/sampleRate;const _R4=Math.cos(_Q4);const _S4=Math.sqrt(_P4);const _T4=_S4+1;const _U4=_S4-1;const _V4=_T4*_R4;const _W4=_U4*_R4;const _X4=_T4-_W4;const _Y4=_T4+_W4;const alpha=Math.sin(_Q4)/(2*_O4);const _Z4=(2*Math.sqrt(_S4)*alpha);const __4=_Y4+_Z4;const _x4=-2*(_U4+_V4);const _y4=_Y4-_Z4;const _z4=_S4*(_X4+_Z4);const _A4=2*_S4*(_U4-_V4);const _B4=_S4*(_X4-_Z4);this._x4=_x4/__4;
this._y4=_y4/__4;this._z4=_z4/__4;this._A4=_A4/__4;this._B4=_B4/__4;this._G4=_N4;this._H4=_O4;this._I4=_P4;}}registerProcessor("lo-shelf-processor",_45);class _55 extends AudioWorkletProcessor{static get parameterDescriptors(){const _15=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_15),minValue:10.0,maxValue:_15},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}
];}constructor(_p3){super();this._93();const _q3=_p3.outputChannelCount[0];this._x4=0;this._y4=0;this._z4=0;this._A4=0;this._B4=0;this._C4=new Float32Array(_q3);this._D4=new Float32Array(_q3);this._E4=new Float32Array(_q3);this._F4=new Float32Array(_q3);this._25=-1;this._H4=-1;}process(_d3,_e3,parameters){const input=_d3[0];const output=_e3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _J4=(cutoff.length===1&&q.length===1);if(_J4)this._K4(cutoff[0],q[0]);for(let c=0;
c<input.length;++c){const _f3=input[c];const _l3=output[c];for(let _g3=0;_g3<_f3.length;++_g3){if(_J4===false){const c=(cutoff[_g3]!==undefined)?cutoff[_g3]:cutoff[0];const _L4=(q[_g3]!==undefined)?q[_g3]:q[0];this._K4(c,_L4);}const _M4=this._z4*_f3[_g3]+this._A4*this._C4[c]+this._B4*this._D4[c]-this._x4*this._E4[c]-this._y4*this._F4[c];this._D4[c]=this._C4[c];this._C4[c]=_f3[_g3];this._F4[c]=this._E4[c];this._E4[c]=_M4;const _h3=(bypass[_g3]!==undefined)?bypass[_g3]:bypass[0];_l3[_g3]=(_h3>0)?_f3[_g3]:_M4;
}}return this._a3;}_K4(_35,_O4){if(_35===this._25&&_O4===this._H4)return;const _Q4=2*Math.PI*_35/sampleRate;const alpha=Math.sin(_Q4)/(2*_O4);const _R4=Math.cos(_Q4);const __4=1+alpha;const _x4=-2*_R4;const _y4=1-alpha;const _z4=(1-_R4)/2;const _A4=1-_R4;const _B4=(1-_R4)/2;this._x4=_x4/__4;this._y4=_y4/__4;this._z4=_z4/__4;this._A4=_A4/__4;this._B4=_B4/__4;this._25=_35;this._H4=_O4;}}registerProcessor("lpf2-processor",_55);class _65 extends AudioWorkletProcessor{static get parameterDescriptors(){const _w4=sampleRate*0.45;
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_w4),minValue:10.0,maxValue:_w4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_p3){super();this._93();const _q3=_p3.outputChannelCount[0];this._x4=0;this._y4=0;this._z4=0;this._A4=0;this._B4=0;this._C4=new Float32Array(_q3);this._D4=new Float32Array(_q3);
this._E4=new Float32Array(_q3);this._F4=new Float32Array(_q3);this._G4=-1;this._H4=-1;this._I4=-1;}process(_d3,_e3,parameters){const input=_d3[0];const output=_e3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _J4=(freq.length===1&&q.length===1&&gain.length===1);if(_J4)this._K4(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _f3=input[c];const _l3=output[c];for(let _g3=0;_g3<_f3.length;++_g3){if(_J4===false){const _t3=(freq[_g3]!==undefined)?freq[_g3]:freq[0];
const _L4=(q[_g3]!==undefined)?q[_g3]:q[0];const _m3=(gain[_g3]!==undefined)?gain[_g3]:gain[0];this._K4(_t3,_L4,_m3);}const _M4=this._z4*_f3[_g3]+this._A4*this._C4[c]+this._B4*this._D4[c]-this._x4*this._E4[c]-this._y4*this._F4[c];this._D4[c]=this._C4[c];this._C4[c]=_f3[_g3];this._F4[c]=this._E4[c];this._E4[c]=_M4;const _h3=(bypass[_g3]!==undefined)?bypass[_g3]:bypass[0];_l3[_g3]=(_h3>0)?_f3[_g3]:_M4;}}return this._a3;}_K4(_N4,_O4,_P4){if(_N4===this._G4&&_O4===this._H4&&_P4===this._I4)return;const _Q4=2*Math.PI*_N4/sampleRate;
const _R4=Math.cos(_Q4);const _S4=Math.sqrt(_P4);const alpha=Math.sin(_Q4)/(2*_O4);const _75=alpha/_S4;const _85=alpha*_S4;const __4=1+_75;const _x4=-2*_R4;const _y4=1-_75;const _z4=1+_85;const _A4=_x4;const _B4=1-_85;this._x4=_x4/__4;this._y4=_y4/__4;this._z4=_z4/__4;this._A4=_A4/__4;this._B4=_B4/__4;this._G4=_N4;this._H4=_O4;this._I4=_P4;}}registerProcessor("peak-eq-processor",_65);class _95{constructor(_a5){this._b5=0;this._c5=0;this.feedback=0;this._d5=0;this.buffer=new Float32Array(_a5);this._e5=0;}process(_i4){
const out=this.buffer[this._e5];this._d5=(this._d5*this._b5)+(out*this._c5);this.buffer[this._e5]=_i4+(this._d5*this.feedback);++this._e5;this._e5%=this.buffer.length;return out;}_f5(_g5){this.feedback=Math.min(Math.max(0,_g5),1);}_h5(_i5){this._b5=Math.min(Math.max(0,_i5),1);this._c5=1-this._b5;}}class _j5{constructor(_a5){this.feedback=0;this.buffer=new Float32Array(_a5);this._e5=0;}process(_i4){const out=this.buffer[this._e5];this.buffer[this._e5]=_i4+(out*this.feedback);++this._e5;this._e5%=this.buffer.length;
return(out-_i4);}_f5(_g5){this.feedback=Math.min(Math.max(0,_g5),1);}}class _k5 extends AudioWorkletProcessor{static _l5=8;static _m5=4;static _n5=0.015;static _o5=0.4;static _p5=0.28;static _q5=0.7;static _r5=[1116,1188,1277,1356,1422,1491,1557,1617];static _s5=[1139,1211,1300,1379,1445,1514,1580,1640];static _t5=[556,441,341,225];static _u5=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_p3){super();this._93();const _q3=_p3.outputChannelCount[0];this._v5=-1;this._w5=-1;this._x5=new Array(_q3);this._y5=new Array(_q3);const _z5=[_k5._r5,_k5._s5];const _A5=[_k5._t5,_k5._u5];for(let c=0;c<_q3;++c){this._x5[c]=new Array(_k5._l5);this._y5[c]=new Array(_k5._m5);for(let i=0;i<_k5._l5;
++i)this._x5[c][i]=new _95(_z5[c%_z5.length][i]);for(let i=0;i<_k5._m5;++i)this._y5[c][i]=new _j5(_A5[c%_A5.length][i]);}this._B5(0.5);this._h5(0.5);for(let c=0;c<_q3;++c)for(let i=0;i<_k5._m5;++i)this._y5[c][i]._f5(0.5);}process(_d3,_e3,parameters){const input=_d3[0];const output=_e3[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _f3=input[c];const _l3=output[c];for(let _C5=0;_C5<_f3.length;++_C5){const _g3=(size[_C5]!==undefined)?size[_C5]:size[0];
const _D5=(damp[_C5]!==undefined)?damp[_C5]:damp[0];this._B5(_g3);this._h5(_D5);_l3[_C5]=_f3[_C5];let out=0;const _u3=_f3[_C5]*_k5._n5;for(let i=0;i<_k5._l5;++i)out+=this._x5[c][i].process(_u3);for(let i=0;i<_k5._m5;++i)out=this._y5[c][i].process(out);const _h3=(bypass[_C5]!==undefined)?bypass[_C5]:bypass[0];if(_h3>0.0){continue;}const _w3=(mix[_C5]!==undefined)?mix[_C5]:mix[0];_l3[_C5]*=(1-_w3);_l3[_C5]+=(out*_w3);}}return this._a3;}_B5(_a5){if(_a5===this._v5)return;const size=(_a5*_k5._p5)+_k5._q5;for(let c=0;
c<this._x5.length;++c)for(let i=0;i<_k5._l5;++i)this._x5[c][i]._f5(size);this._v5=_a5;}_h5(_i5){if(_i5===this._w5)return;const damp=_i5*_k5._o5;for(let c=0;c<this._x5.length;++c)for(let i=0;i<_k5._l5;++i)this._x5[c][i]._h5(damp);this._w5=_i5;}}registerProcessor("reverb1-processor",_k5);class _E5 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,
maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_p3){super();this._93();const _q3=_p3.outputChannelCount[0];this._F5=new Array(_q3).fill(1.0);this._G5=new Array(_q3).fill(0.0);this._H5=new Array(_q3).fill(_I5._J5._K5);this._L5=new Array(_q3);for(let c=0;c<_q3;++c){this._L5[c]=new _M5();
this._L5[c]._N5(sampleRate);this._L5[c]._O5(this._F5[c]);this._L5[c]._P5(this._H5[c]);if(c%2===1){this._L5[c]._Q5(this._G5[c]);}}}process(_d3,_e3,parameters){const input=_d3[0];const output=_e3[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _f3=input[c];const _l3=output[c];for(let _g3=0;_g3<_f3.length;++_g3){_l3[_g3]=_f3[_g3];const _v3=(rate[_g3]!==undefined)?rate[_g3]:rate[0];
const _R5=(offset[_g3]!==undefined)?offset[_g3]:offset[0];const _S5=(shape[_g3]!==undefined)?shape[_g3]:shape[0];this._T5(c,_v3,_R5,_S5);const _U5=this._L5[c]._a4();const _h3=(bypass[_g3]!==undefined)?bypass[_g3]:bypass[0];if(_h3>0.0){continue;}const i=(intensity[_g3]!==undefined)?intensity[_g3]:intensity[0];const out=_f3[_g3]*_U5*i;_l3[_g3]*=(1.0-i);_l3[_g3]+=out;}}return this._a3;}_T5(_c4,_V5,_W5,_X5){if(_V5!==this._F5[_c4]){this._L5[_c4]._O5(_V5);this._F5[_c4]=_V5;}if(_W5!==this._G5[_c4]){if(_c4%2===1){
this._L5[_c4]._Q5(_W5);}this._G5[_c4]=_W5;}if(_X5!==this._H5[_c4]){this._L5[_c4]._P5(_X5);this._H5[_c4]=_X5;}}}registerProcessor("tremolo-processor",_E5);function _I5(){}_I5._J5={_K5:0,_Y5:1,_Z5:2,__5:3,_06:4,_16:5};_I5._26=function(_36){return 1.0-_36;};_I5._46=function(_36){return _36;};_I5._56=function(_36){return 0.5*(Math.sin((_36*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_I5._66=function(_36){if(_36<0.5){return 0.0;}return 1.0;};_I5._76=function(_36){if(_36<0.5){return 2.0*_36;}return 2.0-(2.0*_36);};_I5._86=[_I5._26,
_I5._46,_I5._56,_I5._66,_I5._76];_96._a6=512;_96._b6=1.0/_96._a6;function _96(_c6){this.data=new Float32Array(_96._a6);for(let i=0;i<_96._a6;++i){this.data[i]=_c6(i*_96._b6);}}_96.prototype._a4=function(_36){_36=Math.max(0.0,_36);_36=Math.min(_36,1.0);const _d6=_36*_96._a6;const _e6=~~_d6;const _f6=_d6-_e6;let _e4=_e6;let _f4=_e4+1;if(_e4>=_96._a6){_e4-=_96._a6;}if(_f4>=_96._a6){_f4-=_96._a6;}const _g4=this.data[_e4];const _h4=this.data[_f4];return _g4+(_h4-_g4)*_f6;};_M5._g6=[];_M5._h6=false;_M5._i6=0.0;_M5._w4=20.0;
function _M5(){this._j6=48000;this.shape=_I5._J5._Z5;this.freq=1.0;this._k6=0.0;this._b6=0.0;this._l6=0.0;if(_M5._h6==true){return;}for(let i=0;i<_I5._J5._16;++i){_M5._g6[i]=new _96(_I5._86[i]);}_M5._h6=true;}_M5._m6=function(){return(_M5._h6==true);};_M5.prototype._N5=function(_n6){this._j6=_n6;this._o6();};_M5.prototype._O5=function(_N4){_N4=Math.max(_M5._i6,_N4);_N4=Math.min(_N4,_M5._w4);this.freq=_N4;this._o6();};_M5.prototype._Q5=function(_W5){_W5=Math.max(0.0,_W5);_W5=Math.min(_W5,1.0);const _p6=_W5-this._l6;
this._l6=_W5;this._k6+=_p6;while(this._k6>=1.0){this._k6-=1.0;}while(this._k6<0.0){this._k6+=1.0;}};_M5.prototype._P5=function(_X5){_X5=Math.max(0,_X5);_X5=Math.min(_X5,_I5._J5._16-1);this.shape=_X5;};_M5.prototype._a4=function(){const result=_M5._g6[this.shape]._a4(this._k6);this._k6+=this._b6;while(this._k6>=1.0){this._k6-=1.0;}return result;};_M5.prototype._o6=function(){this._b6=this.freq/this._j6;};